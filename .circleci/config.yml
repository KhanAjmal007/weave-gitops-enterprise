version: 2.1

parameters:
  run_integration_tests:
    type: boolean
    default: false

# https://circleci.com/blog/circleci-hacks-reuse-yaml-in-your-circleci-config-with-yaml/
defaults: &defaults
  docker:
    - image: docker.io/weaveworks/wkp-wks-build:build-in-container-ade34cca
      environment:
        GOFLAGS: -p=4 # see https://github.com/golang/go/issues/26186#issuecomment-435544512 for more info. Docker in Circle incorrectly reports number of CPUs and causes OOM errors
        GOPATH: /go/
        SRCDIR: /src/github.com/weaveworks/wks
  working_directory: /src/github.com/weaveworks/wks

integrationTestCommonEnv: &integrationTestCommonEnv
  GOURL: https://dl.google.com/go/go1.15.8.linux-amd64.tar.gz
  GOCHECKSUM: d3379c32a90fdf9382166f8f48034c459a8cc433730bc9476d39d9082c94583b
  GOROOT: /home/circleci/goroot
  GOPATH: /home/circleci/go
  SRCDIR: /home/circleci/src/github.com/weaveworks/wks
  KUBECTL_URL: https://dl.k8s.io/v1.14.1/kubernetes-client-linux-amd64.tar.gz
  KUBECTL_CHECKSUM: da2076ff28b2dae220558014fe5787e1a811900c0b01c1250ad713e3efea072f
  JK_URL: https://github.com/jkcfg/jk/releases/download/0.3.2/jk-linux-amd64
  JK_CHECKSUM: 84a22074f91d3a4502944a46bcf016fd9989b03e23e72d2bee5b46b31a0ee249
  KUBEBUILDER_URL: https://go.kubebuilder.io/dl/2.3.1/linux/amd64
  KUBEBUILDER_CHECKSUM: ff496970f209706763f2aba2bdcefc2de8d00085b3b972b5790117b59ea4ed10
  POD_CIDR_BLOCK: '192.168.0.0/16'
  SERVICE_CIDR_BLOCK: '10.96.0.0/12'
  WKP_DEBUG: true

integrationTestConfig: &integrationTestConfig
  requires:
    - build
  # filters:
  #   branches:
  #     only:
  #       - master

nightlyTestConfig: &nightlyTestConfig
  requires:
    - build

workflows:
  test-build-deploy:
    unless: << pipeline.parameters.run_integration_tests >>
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - build-darwin:
          requires:
            - build
            - unit-tests
          filters:
            tags:
              only: /.*/
      - container-tests
      - unit-tests
      - unit-tests-with-coverage
      - ui-backend-integration-tests
      - fast-integration-tests:
          requires:
            - build
      - trigger-integration-tests:
          requires:
            - fast-integration-tests
          filters:
            branches:
              only:
                - master
      - acceptance-tests:
          requires:
            - build
            - ui-backend-integration-tests

  run-integration-tests:
    when: << pipeline.parameters.run_integration_tests >>
    jobs:
      - creation-wks-components-on-eks
      - integration-tests-creation-footloose
      - creation-ssh-gcp-centos
      - creation-ssh-gcp-centos-lb
      - upgrade-ssh-gcp-centos
      - upgrade-ssh-gcp-centos-lb
      - creation-ssh-gcp-ubuntu
      - creation-ssh-gcp-ubuntu-lb
      - preflight-ssh-gcp-centos
      - cluster-lifecycle-tests
      - cluster-lifecycle-footloose-tests
      - workspaces-tests
      - existing-cluster-tests
      - cluster-components-on-kind-1-18
      - build
      - third-party-dependencies-check:
          requires:
            - build

  nightly:
    triggers:
      - schedule:
          cron: '0 0 * * *'
          filters:
            branches:
              only:
                - release-2.5
    jobs:
      - build
      - third-party-dependencies-check:
          <<: *nightlyTestConfig
      - cluster-components-gcp:
          <<: *nightlyTestConfig
      - upgrade-to-latest-patch:
          <<: *nightlyTestConfig
      - workspaces-tests:
          <<: *nightlyTestConfig
      - ssh-key-file-variations:
          <<: *nightlyTestConfig

  weekly:
    triggers:
      - schedule:
          # Run at midnight on Sunday
          cron: '0 0 * * 0'
          filters:
            branches:
              only:
                - release-2.5
    jobs:
      - build
      - conformance-tests-sonobuoy-p1:
          <<: *nightlyTestConfig
      - conformance-tests-sonobuoy-p2:
          <<: *nightlyTestConfig
      - vulnerability-detection:
          <<: *nightlyTestConfig

commands:
  get-wk-binary:
    description: Get the wk binary from workspace or s3
    steps:
      - run:
          name: Get the wk binary from workspace or s3
          command: |
            DST_PATH=cmd/wk/wk

            # get a wk binary from the attached workspace to use in the integration test
            SRC_PATH=/tmp/workspace/cmd/wk/wk
            if [ -f "$SRC_PATH" ]; then
              cp "$SRC_PATH" "$DST_PATH"
            else
              TAG=$(./tools/image-tag)
              # TAG=master
              curl -o "$DST_PATH" https://s3.amazonaws.com/weaveworks-wkp/wk-${TAG}-linux-amd64
              chmod +x "$DST_PATH"
            fi

  install-integration-test-deps:
    description: Install go, kubectl and hub for the integration tests
    steps:
      - run:
          name: Install deps
          command: |
            # install go
            (cd ~ && curl --silent -L $GOURL -o go.tar.gz && echo "$GOCHECKSUM go.tar.gz" | sha256sum -c)
            mkdir -p $GOROOT && tar xf ~/go.tar.gz -C $GOROOT --strip-components 1

            # install kubectl
            curl --silent -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin

            # install hub
            curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
            sudo mv bin/hub /usr/local/bin

            # TODO: Move this to the build image
            # install kubebuilder
            curl --silent -L $KUBEBUILDER_URL -o kubebuilder.tar.gz
            echo "$KUBEBUILDER_CHECKSUM kubebuilder.tar.gz" | sha256sum -c
            tar xvzf kubebuilder.tar.gz --strip-components=1
            sudo mkdir -p /usr/local/kubebuilder
            sudo mv bin /usr/local/kubebuilder
      - run:
          name: Install jk
          command: |
            curl --silent -L $JK_URL -o jk
            echo "$JK_CHECKSUM jk" | sha256sum -c
            chmod a+x jk
            sudo mv jk /usr/local/bin

  add-go-mod-ssh-keys:
    description: Need these keys to pull some private go modules
    steps:
      - add_ssh_keys:
          # With the switch go modules we need to pull some private
          # Weaveworks repositories - specifically gokrb5.  We need to use
          # an ssh key configured in Circle and Github.  The deploy key
          # CircleCI adds is specific to a repository and doesn't work
          # for fetching other private repos.
          fingerprints:
            - 'cc:e8:46:28:c2:af:5e:30:cc:01:59:ab:9b:ad:45:5c'

  go-mod-cached:
    description: Download or use cached modules
    steps:
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: Download Go modules
          command: |
            export PATH=$GOROOT/bin:$PATH
            go mod download
      - save_cache:
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod

  reload-wkp-ssh-keys:
    description: reload wkp ssh keys into eng
    steps:
      - run:
          name: load ssh keys
          command: |
            # remove the circle config which locks down github keys
            mv ~/.ssh/config{,.old}
            echo $WKP_GITHUB_PRIVATE_KEY | base64 -d > user-ssh-key
            chmod 600 user-ssh-key
            ssh-agent -s | grep -v echo >> $BASH_ENV
            source $BASH_ENV
            ssh-add -D
            ssh-add user-ssh-key

  setup-integration-test-env:
    description: 'Common steps to integration tests'
    steps:
      - checkout
      - install-integration-test-deps
      - add-go-mod-ssh-keys
      - go-mod-cached
      - reload-wkp-ssh-keys
      - attach_workspace:
          at: /tmp/workspace
      - get-wk-binary

  install-kind:
    description: 'Installs kind'
    steps:
      - run:
          name: download kind
          command: |
            curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64
            chmod +x ./kind
            sudo mv ./kind /usr/local/bin/kind

  run-sonobuoy-tests:
    description: 'Runs conformance tests using sonobuoy'
    parameters:
      version:
        type: string
        default: '1.20.2'
    steps:
      - run:
          name: Create cluster
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test
            VERSION=<< parameters.version >>

            # provision GCE VMs
            USE_IMAGE=0 NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS)) ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS false

            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            CLUSTER_VERSIONS=$VERSION go test -v -run TestClusterCreation --timeout=20m
      - run:
          name: Run sonobuoy tests
          command: |
            cd test/integration/test
            VERSION=<< parameters.version >>

            sonobuoy run --wait --wait-output Spinner --mode certified-conformance
            results=$(sonobuoy retrieve)
            mv $results ./sonobuoy-test-results-$VERSION.tar.gz

            # untar results to expose junit_01.xml
            mkdir sonobuoy-test-results-$VERSION
            tar xzf ./sonobuoy-test-results-$VERSION.tar.gz -C ./sonobuoy-test-results-$VERSION

            # print brief result summary
            sonobuoy results ./sonobuoy-test-results-$VERSION.tar.gz

            # collect results into results directory
            mkdir -p sonobuoy-test-results/$VERSION
            cp -a ./sonobuoy-test-results-$VERSION/plugins/e2e/results/* ./sonobuoy-test-results/$VERSION
      - run:
          name: Destroy cluster
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy

jobs:
  build:
    <<: *defaults
    # For nvm stuff
    environment:
      BASH_ENV: ~/.bashrc
    steps:
      - checkout
      - add-go-mod-ssh-keys
      - setup_remote_docker
      - run:
          name: Install helm
          command: |
            # install helm
            curl -L https://get.helm.sh/helm-v2.17.0-linux-amd64.tar.gz | tar xvz
            sudo mv linux-amd64/helm /usr/bin/helm
            sudo chmod +x /usr/bin/helm
      - run: touch ./wks-build/.uptodate
      - run: make -j4 BUILD_IN_CONTAINER=false
      - deploy:
          name: Push wk to S3
          command: |
            TAG=$(./tools/image-tag)

            # aws gets its credential through the AWS_ACCESS_KEY_ID and
            # AWS_SECRET_ACCESS_KEY environment variables.
            export AWS_ACCESS_KEY_ID=$WKP_S3_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_S3_AWS_SECRET_ACCESS_KEY

            # Upload uniquely tagged binaries
            aws s3 cp cmd/wk/wk s3://weaveworks-wkp/wk-${TAG}-linux-amd64

            # Upload a "master" binary for easy access to latest master build
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws s3 cp cmd/wk/wk s3://weaveworks-wkp/wk-master-linux-amd64
            fi
      - run:
          name: Publish helm chart
          command: |
            export AWS_ACCESS_KEY_ID=$WKP_S3_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_S3_AWS_SECRET_ACCESS_KEY

            TAG=$(git describe --always)
            IMAGE_TAG=$(./tools/image-tag)

            cd ui
            ./tools/publish-chart-to-s3.sh $TAG $IMAGE_TAG
            aws s3 cp pkg/index.yaml s3://weaveworks-wkp/charts/
            aws s3 cp pkg/*.tgz s3://weaveworks-wkp/charts/
      - persist_to_workspace:
          root: .
          paths:
            - kubectl
            - cmd/wk/wk
            - cmd/mock-https-authz-server/server
            - ui/node_modules
            - wkp-cluster-components/node_modules
      - run: docker login -u "$DOCKER_IO_USER" -p "$DOCKER_IO_PASSWORD" docker.io
      - run: make push

  build-darwin:
    <<: *defaults
    steps:
      - checkout
      - add-go-mod-ssh-keys
      - run:
          name: Build darwin binaries
          command: |
            LOCAL_BINARIES_GOOS=darwin make cmd/wk/wk BUILD_IN_CONTAINER=false
            mv cmd/wk/wk cmd/wk/wk-darwin-amd64
      - deploy:
          name: Push wk to S3
          command: |
            TAG=$(./tools/image-tag)

            # aws gets its credential through the AWS_ACCESS_KEY_ID and
            # AWS_SECRET_ACCESS_KEY environment variables.
            export AWS_ACCESS_KEY_ID=$WKP_S3_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_S3_AWS_SECRET_ACCESS_KEY

            # Upload uniquely tagged binaries
            aws s3 cp cmd/wk/wk-darwin-amd64 s3://weaveworks-wkp/wk-${TAG}-darwin-amd64

            # Upload a "master" binary for easy access to latest master build
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              aws s3 cp cmd/wk/wk-darwin-amd64 s3://weaveworks-wkp/wk-master-darwin-amd64
            fi

  unit-tests:
    <<: *defaults
    working_directory: /src/github.com/weaveworks/wks
    steps:
      - checkout
      - add-go-mod-ssh-keys
      - run:
          name: Install kubectl
          command: |
            export KUBECTL_URL=https://dl.k8s.io/v1.14.1/kubernetes-client-linux-amd64.tar.gz
            export KUBECTL_CHECKSUM=da2076ff28b2dae220558014fe5787e1a811900c0b01c1250ad713e3efea072f
            curl --silent -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin
      - run:
          name: Run unit tests
          command: |
            go version
            export KUBESEAL_BINARY_PATH=/src/github.com/weaveworks/wks/setup/wk-quickstart/bin/kubeseal # used in unit-tests of workspaces/create_test.go
            export SEALED_SECRETS_CERT_PATH=/src/github.com/weaveworks/wks/test/integration/test/test-sealed-secrets-cert.crt # used in unit-tests of workspaces/create_test.go
            export WKP_NO_SCOPES_GITHUB_TOKEN=$WKP_NO_SCOPES_GITHUB_TOKEN
            make unit-tests BUILD_IN_CONTAINER=false
            make cluster-component-tests BUILD_IN_CONTAINER=false
      - run:
          name: Lint
          command: |
            make lint BUILD_IN_CONTAINER=false

  unit-tests-with-coverage:
    <<: *defaults
    working_directory: /src/github.com/weaveworks/wks
    steps:
      - checkout
      - add-go-mod-ssh-keys
      - run:
          name: Install kubectl
          command: |
            export KUBECTL_URL=https://dl.k8s.io/v1.14.1/kubernetes-client-linux-amd64.tar.gz
            export KUBECTL_CHECKSUM=da2076ff28b2dae220558014fe5787e1a811900c0b01c1250ad713e3efea072f
            curl --silent -L $KUBECTL_URL -o kubectl.tar.gz
            echo "$KUBECTL_CHECKSUM kubectl.tar.gz" | sha256sum -c
            tar xvzf kubectl.tar.gz --strip-components=3
            sudo mv kubectl /usr/local/bin
      - run:
          name: Run unit tests
          command: |
            go version
            export KUBESEAL_BINARY_PATH=/src/github.com/weaveworks/wks/setup/wk-quickstart/bin/kubeseal # used in unit-tests of workspaces/create_test.go
            export SEALED_SECRETS_CERT_PATH=/src/github.com/weaveworks/wks/test/integration/test/test-sealed-secrets-cert.crt # used in unit-tests of workspaces/create_test.go
            export WKP_NO_SCOPES_GITHUB_TOKEN=$WKP_NO_SCOPES_GITHUB_TOKEN
            go get github.com/mattn/goveralls

            # Run the tests
            make unit-tests-with-coverage BUILD_IN_CONTAINER=false

            # submit the coverage 1 by 1, seems important that they have a -flagname
            goveralls -coverprofile=.coverprofile -flagname wks -parallel -service=circle-ci -repotoken $WKP_COVERALLS_TOKEN
            (cd cmd/event-writer; goveralls -coverprofile=.coverprofile -flagname event-writer -parallel -service=circle-ci -repotoken $WKP_COVERALLS_TOKEN)
            (cd common; goveralls -coverprofile=.coverprofile -flagname common -parallel -service=circle-ci -repotoken $WKP_COVERALLS_TOKEN)

            # We've finished submitting the coverage
            curl -k "https://coveralls.io/webhook?repo_token=$WKP_COVERALLS_TOKEN" \
              -d "payload[build_num]=$CIRCLE_BUILD_NUM&payload[status]=done"

  container-tests:
    machine:
      image: ubuntu-1604:202004-01
    environment:
      <<: *integrationTestCommonEnv
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - checkout
      - add-go-mod-ssh-keys
      - run:
          name: Install go
          command: |
            (cd ~ && curl --silent -L $GOURL -o go.tar.gz && echo "$GOCHECKSUM go.tar.gz" | sha256sum -c)
            mkdir -p $GOROOT && tar xf ~/go.tar.gz -C $GOROOT --strip-components 1

      - run:
          name: Run container tests
          command: |
            export PATH=$GOROOT/bin:$PATH
            go version
            make container-tests

  trigger-integration-tests:
    docker:
      - image: weaveworks/wkp-wks-build:trigger-circle-ci-workflows-9e4b65ae
    steps:
      - checkout
      - run:
          name: Run integration tests
          command: |
            branch=$(git rev-parse --abbrev-ref HEAD)
            CIRCLECI_TOKEN=$WEAVEWORKSBOT_CIRCLECI_TOKEN ./tools/trigger-integration-tests.sh "${branch}"

  # Can be a bit faster
  fast-integration-tests:
    docker:
      - image: quay.io/wks/build:master-134af34f
    environment:
      <<: *integrationTestCommonEnv
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run: &setup-base-footloose-config-yaml
          name: Setup base config.yaml
          command: |
            cd test/integration/test
            # create file with docker password
            export CLUSTER_NAME="$CIRCLE_JOB-$CIRCLE_BUILD_NUM"
            echo "$DOCKER_IO_PASSWORD" > /tmp/workspace/docker-io-password
            sed -i "s/gitProviderOrg:.*/gitProviderOrg: $WKP_GITHUB_ORG/" config.yaml
            sed -i "s/dockerIOUser:.*/dockerIOUser: $DOCKER_IO_USER/" config.yaml
            sed -i "s|dockerIOPasswordFile:.*|dockerIOPasswordFile: /tmp/workspace/docker-io-password|" config.yaml
            sed -i "s/clusterName:.*/clusterName: $CLUSTER_NAME/" config.yaml
            sed -i "s/sshUser:.*/sshUser: root/" config.yaml
            sed -i "s/sshKeyFile:.*/sshKeyFile: ''/" config.yaml
            sed -i "s/track:.*/track: wks-footloose/" config.yaml
            sed -i "s|podCIDRBlocks:.*|podCIDRBlocks: [$POD_CIDR_BLOCK]|" config.yaml
            sed -i "s|serviceCIDRBlocks:.*|serviceCIDRBlocks: [$SERVICE_CIDR_BLOCK]|" config.yaml
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH
            cd test/integration/test
            go test -v -run TestEntitlements
            # run before setting GITHUB_TOKEN
            go test -v -run TestHubAuthCheck
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            go test -v -run TestRunMultipleSetupInstall

            go test -v -run TestImageRepositoryCheck

            go test -v -run TestAgent

            cd ../../../cmd/workspaces-controller
            make test

  creation-wks-components-on-eks:
    machine:
      image: ubuntu-1604:202004-01
    environment:
      <<: *integrationTestCommonEnv
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          name: Setup base config.yaml
          command: |
            cd test/integration/test
            # create file with docker password
            export CLUSTER_NAME="$CIRCLE_JOB-$CIRCLE_BUILD_NUM"
            echo "$DOCKER_IO_PASSWORD" > /tmp/workspace/docker-io-password
            sed -i "s/gitProviderOrg:.*/gitProviderOrg: $WKP_GITHUB_ORG/" config.yaml
            sed -i "s/dockerIOUser:.*/dockerIOUser: $DOCKER_IO_USER/" config.yaml
            sed -i "s|dockerIOPasswordFile:.*|dockerIOPasswordFile: /tmp/workspace/docker-io-password|" config.yaml
            sed -i "s/clusterName:.*/clusterName: $CLUSTER_NAME/" config.yaml
            sed -i "s/track:.*/track: wks-components/" config.yaml
      - run:
          name: Run e2e tests
          no_output_timeout: 35m
          command: |
            export PATH=$GOROOT/bin:$PATH

            # install iam-auth
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin

            # install eksctl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

            cd test/integration/test
            export AWS_ACCESS_KEY_ID=$WKP_EKS_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_EKS_AWS_SECRET_ACCESS_KEY
            eksctl get cluster
            cat eks-cluster-template.yaml | sed -e "s/\${name}/$(date +%m%d%y-%s)/" > eks-cluster.yaml
            eksctl create cluster -f eks-cluster.yaml

            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            # Skip the y/n prompt when installing wks-components
            export SKIP_PROMPT=1
            go test -v -run TestClusterCreation --timeout=99999s
            eksctl delete cluster -f eks-cluster.yaml
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy EKS resources
          command: |
            cd test/integration/test
            export AWS_ACCESS_KEY_ID=$WKP_EKS_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_EKS_AWS_SECRET_ACCESS_KEY
            eksctl delete cluster -f eks-cluster.yaml || echo "no worries"
          when: on_fail

  acceptance-tests:
    docker:
      - image: docker.io/weaveworks/wkp-wks-build:build-in-container-ade34cca
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 1
          NUM_WORKERS: 2
          USE_LB: false
          SKIP_COMPONENTS: false
          MCCP_GCE_LEAF_KUBECONFIG: '/tmp/mccp-gce-leaf-kubeconfig'
          MCCP_EKS_LEAF_KUBECONFIG: '/tmp/mccp-eks-leaf-kubeconfig'
          # Uses a pre existing GCE cluster
          # Its cluster repo is at https://github.com/wkp-example-org/mccp-acceptance-tests-gce
          # If the env var below is set, the test will connect the gce cluster to mccp
          CONNECT_GCE_LEAF_TEST: 'true'
          # Uses a pre existing EKS cluster
          # This is not a WKP cluster.
          # If the env var below is set, the test will connect the eks cluster to mccp
          CONNECT_EKS_LEAF_TEST: 'true'
          CONNECT_KIND_WKP_LEAF_TEST: 'true'
          MCCP_KIND_WKP_LEAF_KUBECONFIG: '/tmp/mccp-kind-wkp-leaf-kubeconfig'
          RUN_MCCP_SUITE_WITH_POSTGRES: 'false'
      - image: selenium/standalone-chrome:latest
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - install-kind
      - setup_remote_docker
      - run:
          name: Setup base config.yaml
          command: |
            cd test/integration/test
            export CLUSTER_NAME="$CIRCLE_JOB-$CIRCLE_BUILD_NUM"
            # create file with docker password
            echo "$DOCKER_IO_PASSWORD" > /tmp/workspace/docker-io-password
            sed -i "s/gitProviderOrg:.*/gitProviderOrg: $WKP_GITHUB_ORG/" config.yaml
            sed -i "s/dockerIOUser:.*/dockerIOUser: $DOCKER_IO_USER/" config.yaml
            sed -i "s|dockerIOPasswordFile:.*|dockerIOPasswordFile: /tmp/workspace/docker-io-password|" config.yaml
            sed -i "s/clusterName:.*/clusterName: $CLUSTER_NAME/" config.yaml
            sed -i "s/track:.*/track: wks-ssh/" config.yaml
            sed -i "s/sshUser:.*/sshUser: weaveworks-cit/" config.yaml
            sed -i "s|sshKeyFile:.*|sshKeyFile: /root/.ssh/weaveworks_cit_id_rsa|" config.yaml
            sed -i "s|podCIDRBlocks:.*|podCIDRBlocks: [$POD_CIDR_BLOCK]|" config.yaml
            sed -i "s|serviceCIDRBlocks:.*|serviceCIDRBlocks: [$SERVICE_CIDR_BLOCK]|" config.yaml
      - run:
          name: Run Acceptance Tests
          no_output_timeout: 20m
          command: |
            export PATH=$GOROOT/bin:$PATH
            # This needs to be set to false otherwise the local repo is deleted at the end of the creation test
            export CLEANUP_REPO=false
            cd test/integration/test

            # install iam-auth
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.8/2020-09-18/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin
            export AWS_ACCESS_KEY_ID=$WKP_EKS_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$WKP_EKS_AWS_SECRET_ACCESS_KEY

            lb_count=$([ "$USE_LB" == "true" ] && echo "1" || echo "0")
            export NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS + $lb_count))
            export USE_IMAGE=0
            # provision $NUM_HOSTS GCE VMs
            ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS $USE_LB

            # e.g. wkp-ci-test-bot from 1passwords
            export ADD_TEAM_WORKSPACE_TOKEN=true
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            export WORKSPACES_ORG_ADMIN_TOKEN=$WKP_GITHUB_TOKEN

            # decode GCE kubeconfig and store at path set in MCCP_GCE_LEAF_KUBECONFIG
            echo $WKP_ACCEPTANCE_GCE_KUBECONFIG
            echo $WKP_ACCEPTANCE_GCE_KUBECONFIG | base64 -d > $MCCP_GCE_LEAF_KUBECONFIG

            # decode EKS kubeconfig and store at path set in MCCP_EKS_LEAF_KUBECONFIG
            echo $WKP_ACCEPTANCE_EKS_KUBECONFIG
            echo $WKP_ACCEPTANCE_EKS_KUBECONFIG | base64 -d > $MCCP_EKS_LEAF_KUBECONFIG

            go test -v -run TestClusterCreation --timeout=99999s

            # Update the natsURL in components.js to the node's public IP for the agent in the
            # GCE cluster to be able to connect
            cd /tmp/cluster_dir
            WORKER_NODE_EXTERNAL_IP=$(grep "publicAddress" setup/config.yaml | tail -n 1 | xargs | cut -f 2 -d ' ')
            echo "found worker node ip in config.yaml ${WORKER_NODE_EXTERNAL_IP}"
            NATS_NODEPORT=$(kubectl get service -n wkp-gitops-repo-broker nats-client -ojsonpath='{.spec.ports[0].nodePort}')
            echo "found node port for nats-client service ${NATS_NODEPORT}"
            sed -i "s/\"natsURL\":.*/\"natsURL\": \"$WORKER_NODE_EXTERNAL_IP:$NATS_NODEPORT\",/" cluster/platform/components.js

            git diff
            git add cluster/platform/components.js
            git commit -m"Update nats url in components.js"
            git push
            cd -

            kubectl get pods -A
            # Wait for cluster to settle
            sleep 60

            set -x
            # Install socat locally and start port-forwarding service (required for CircleCI)
            apt-get install -y curl ca-certificates liblz4-tool rsync socat
            ../../utils/scripts/start-portforward-service.sh start

            # Create a kind cluster
            kind create cluster --name my-kind-cluster-01 --config kind-config.yaml --kubeconfig $MCCP_KIND_WKP_LEAF_KUBECONFIG
            # Start port-forward session (required for CircleCI)
            APISERVER_PORT_WKP=$(kubectl --kubeconfig $MCCP_KIND_WKP_LEAF_KUBECONFIG config view -o jsonpath='{.clusters[].cluster.server}' | cut -d: -f 3 -)
            ../../utils/scripts/portforward.sh $APISERVER_PORT_WKP
            # Install cluster components
            export KUBECONFIG=$MCCP_KIND_WKP_LEAF_KUBECONFIG
            export SKIP_PROMPT=1
            export CLUSTER_NAME="$CIRCLE_JOB-$CIRCLE_BUILD_NUM-$RANDOM"
            wkp_kind_cluster_dir=$(mktemp -d)
            cd $wkp_kind_cluster_dir
            $CIRCLE_WORKING_DIRECTORY/cmd/wk/wk setup install --entitlements=$CIRCLE_WORKING_DIRECTORY/test/ci-wks-unlimited.entitlements
            echo "$DOCKER_IO_PASSWORD" > /tmp/workspace/docker-io-password
            sed -i "s/track:.*/track: wks-components/" $wkp_kind_cluster_dir/setup/config.yaml
            sed -i "s/clusterName:.*/clusterName: $CLUSTER_NAME/" $wkp_kind_cluster_dir/setup/config.yaml
            sed -i "s/gitProvider:.*/gitProvider: github/" $wkp_kind_cluster_dir/setup/config.yaml
            sed -i "s/gitProviderOrg:.*/gitProviderOrg: $WKP_GITHUB_ORG/" $wkp_kind_cluster_dir/setup/config.yaml
            sed -i "s/dockerIOUser:.*/dockerIOUser: $DOCKER_IO_USER/" $wkp_kind_cluster_dir/setup/config.yaml 
            sed -i "s|dockerIOPasswordFile:.*|dockerIOPasswordFile: /tmp/workspace/docker-io-password|" $wkp_kind_cluster_dir/setup/config.yaml 
            $CIRCLE_WORKING_DIRECTORY/cmd/wk/wk setup run --entitlements=$CIRCLE_WORKING_DIRECTORY/test/ci-wks-unlimited.entitlements
            # Wait until pods are running
            kubectl wait nodes --all --for=condition=ready --timeout=120s || true
            kubectl wait pods -n kube-system -l tier=control-plane --for=condition=ready --timeout=120s || true
            kubectl wait deployment.apps/coredns -n kube-system --for=condition=available --timeout=120s || true
            kubectl get pods -A
            kubectl get nodes
            cd $CIRCLE_WORKING_DIRECTORY/test/integration/test
            
            # Unset KUBECONFIG to let kubectl point back to the MCCP cluster under test
            unset KUBECONFIG
            kubectl get pods -A
            export SELENIUM_DEBUG=true
            ../../../cmd/wk/wk ui --entitlements=../../ci-wks-unlimited.entitlements --launch-browser=false  &
            cd ../../acceptance/test/
            export ACCEPTANCE_TESTS_DATABASE_TYPE=sqlite
            go test -v --timeout=99999s
            
            if [ ${RUN_MCCP_SUITE_WITH_POSTGRES} == "true" ]; then
              # Deploy postgres
              kubectl apply -f postgres-manifests.yaml

              # Wait for the postgres deployment to rollout
              kubectl wait --for=condition=available --timeout=600s deployment/postgres

              cd /tmp/cluster_dir
              # Get the IP of the postgres service
              POSTGRES_CLUSTER_IP=$(kubectl get service postgres -ojsonpath={.spec.clusterIP})
              sed -i "s/databaseType:.*/databaseType: postgres/" setup/config.yaml
              sed -i "s/databaseURI:.*/databaseURI: $POSTGRES_CLUSTER_IP/" setup/config.yaml
              git pull
              git add setup/config.yaml
              git commit -m "Set database type to postgres"
              git push origin master

              kubectl create secret generic -n wkp-gitops-repo-broker mccp-db-credentials --from-literal=username=postgres --from-literal=password=password -oyaml --dry-run > mccp-db-credentials.yaml
              kubectl apply -f mccp-db-credentials.yaml

              kubectl get pods -A

              RETRIES=0
              MAX_RETRIES=10
              until [ ${DB_TYPE} == 'postgres' ]
              do
                DB_TYPE=$(kubectl get deployment -n wkp-gitops-repo-broker wkp-event-writer -ojsonpath='{.spec.template.spec.containers[0].env[?(@.name=="DB_TYPE")].value}')
                echo "Database type should be postgres: ${DB_TYPE}"
                sleep 5
                RETRIES=$((RETRIES+1))
                if [ $RETRIES -ge $MAX_RETRIES ]; then
                  echo "database type did not update to postgres"
                  exit 1
                fi
              done

              # Run acceptance-tests again with postgres
              cd $CIRCLE_WORKING_DIRECTORY/test/acceptance/test
              ACCEPTANCE_TESTS_DATABASE_TYPE=postgres
              go test -v --timeout=99999s
            fi

            # Delete the repo backing one of the kind clusters
            hub delete -y "${WKP_GITHUB_ORG}/${CLUSTER_NAME}"
            if [ $CLEANUP_REPO != "false" ]; then
              hub delete -y "${WKP_GITHUB_USER}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
            fi

            cd ../../integration/test

            ../bin/internal/run-integration-tests.sh destroy
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy
          when: on_fail
      - store_artifacts:
          path: /tmp/workspace/test
      - store_test_results:
          path: /tmp/workspace/test

  integration-tests-creation-footloose:
    machine:
      image: ubuntu-1604:202004-01
    environment:
      <<: *integrationTestCommonEnv
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-footloose-config-yaml
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test
            export SKIP_COMPONENTS=true
            export UPGRADE_VERSIONS='1.18.16,1.19.8,1.20.2'
            export CLUSTER_VERSIONS='1.17.7'

            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN

            go test -v -run TestClusterCreation --timeout=99999s
            go test -v -run TestGenerateSecrets --timeout=600s

  creation-ssh-gcp-centos: &creation-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          # Don't USE the default image, use IMAGE_NAME instead
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 1
          NUM_WORKERS: 2
          CLUSTER_VERSIONS: '1.18.16,1.19.8,1.20.2'
          SKIP_COMPONENTS: true
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run: &setup-base-gce-config-yaml
          name: Setup base config.yaml
          command: |
            cd test/integration/test
            export CLUSTER_NAME="$CIRCLE_JOB-$CIRCLE_BUILD_NUM"
            # create file with docker password
            echo "$DOCKER_IO_PASSWORD" > /tmp/workspace/docker-io-password
            sed -i "s/gitProviderOrg:.*/gitProviderOrg: $WKP_GITHUB_ORG/" config.yaml
            sed -i "s/dockerIOUser:.*/dockerIOUser: $DOCKER_IO_USER/" config.yaml
            sed -i "s|dockerIOPasswordFile:.*|dockerIOPasswordFile: /tmp/workspace/docker-io-password|" config.yaml
            sed -i "s/clusterName:.*/clusterName: $CLUSTER_NAME/" config.yaml
            sed -i "s/track:.*/track: wks-ssh/" config.yaml
            sed -i "s/sshUser:.*/sshUser: weaveworks-cit/" config.yaml
            sed -i "s|sshKeyFile:.*|sshKeyFile: /root/.ssh/weaveworks_cit_id_rsa|" config.yaml
            sed -i "s|podCIDRBlocks:.*|podCIDRBlocks: [$POD_CIDR_BLOCK]|" config.yaml
            sed -i "s|serviceCIDRBlocks:.*|serviceCIDRBlocks: [$SERVICE_CIDR_BLOCK]|" config.yaml
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test

            lb_count=$([ "$USE_LB" == "true" ] && echo "1" || echo "0")
            export NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS + $lb_count))
            export USE_IMAGE=0
            # provision $NUM_HOSTS GCE VMs
            ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS $USE_LB

            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN

            go test -v -run TestFlavoredClusterCreation --timeout=99999s
            go test -v -run TestClusterCreation --timeout=99999s
            ../bin/internal/run-integration-tests.sh destroy
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy
          when: on_fail

  ssh-key-file-variations:
    <<: *creation-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 1
          NUM_WORKERS: 1
          USE_LB: false
          CLUSTER_VERSIONS: '1.20.2'
          SKIP_COMPONENTS: true
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-gce-config-yaml
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test

            lb_count=$([ "$USE_LB" == "true" ] && echo "1" || echo "0")
            export NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS + $lb_count))
            export USE_IMAGE=0
            # provision GCE VMs
            ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS $USE_LB

            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN

            cp /root/.ssh/weaveworks_cit_id_rsa /root/.ssh/id_rsa
            go test -v -run TestDefaultSshKeyFile --timeout=99999s
            go test -v -run TestMissingSshKeyFile --timeout=99999s
            go test -v -run TestIncorrectSshKeyFile --timeout=99999s

            ../bin/internal/run-integration-tests.sh destroy
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy
          when: on_fail

  creation-ssh-gcp-no-lb:
    <<: *creation-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 3
          NUM_WORKERS: 1
          USE_LB: false
          CLUSTER_VERSIONS: '1.18.16,1.19.8,1.20.2'
          SKIP_COMPONENTS: true

  creation-ssh-gcp-centos-lb:
    <<: *creation-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 3
          NUM_WORKERS: 1
          USE_LB: true
          CLUSTER_VERSIONS: '1.20.2'
          SKIP_COMPONENTS: true

  upgrade-ssh-gcp-centos: &upgrade-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 3
          NUM_WORKERS: 2
          USE_LB: false
          SKIP_COMPONENTS: true
          UPGRADE_VERSIONS: '1.18.16,1.19.8,1.20.2'
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-gce-config-yaml
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test

            lb_count=$([ "$USE_LB" == "true" ] && echo "1" || echo "0")
            export NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS + $lb_count))
            export USE_IMAGE=0
            # provision GCE VMs
            ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS $USE_LB

            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN

            go test -v -run TestUpgrade --timeout=99999s

            ../bin/internal/run-integration-tests.sh destroy
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy
          when: on_fail
      - store_artifacts:
          path: /tmp/wks-controller-logs.txt

  upgrade-ssh-gcp-centos-lb:
    <<: *upgrade-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 3
          NUM_WORKERS: 2
          USE_LB: true
          SKIP_COMPONENTS: false
          UPGRADE_VERSIONS: '1.18.16,1.19.8,1.20.2'

  upgrade-to-latest-patch: &upgrade-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 3
          NUM_WORKERS: 1
          USE_LB: false
          SKIP_COMPONENTS: true
          STARTING_VERSION: '1.17.3'
          SUPPORTED_MINOR_VERSIONS: '1.18,1.19,1.20'
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-gce-config-yaml
      - run:
          name: Run e2e tests
          no_output_timeout: 20m
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test

            lb_count=$([ "$USE_LB" == "true" ] && echo "1" || echo "0")
            export NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS + $lb_count))
            export USE_IMAGE=0

            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN

            eval "$(../bin/internal/get-latest-patch-versions.sh ${STARTING_VERSION} ${SUPPORTED_MINOR_VERSIONS})"

            # provision GCE VMs
            ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS $USE_LB

            go test -v -run TestUpgrade --timeout=99999s

            ../bin/internal/run-integration-tests.sh destroy
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy
          when: on_fail

  creation-ssh-gcp-ubuntu:
    <<: *creation-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: ubuntu-os-cloud/ubuntu-1804-lts
          CLUSTER_VERSIONS: '1.18.16,1.19.8,1.20.2'
          SKIP_COMPONENTS: true
          NUM_MASTERS: 1
          NUM_WORKERS: 2

  creation-ssh-gcp-ubuntu-lb:
    <<: *creation-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: ubuntu-os-cloud/ubuntu-1804-lts
          USE_LB: true
          NUM_MASTERS: 3
          NUM_WORKERS: 2
          CLUSTER_VERSIONS: '1.20.2'
          SKIP_COMPONENTS: true

  ui-backend-integration-tests:
    docker:
      - image: docker.io/weaveworks/wkp-wks-build:build-in-container-ade34cca
        environment:
          <<: *integrationTestCommonEnv
      - image: selenium/standalone-chrome:latest
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          name: Run tests
          command: |
            export PATH=$GOROOT/bin:$PATH
            export SELENIUM_DEBUG=true

            make ui-build-for-tests
            cd test/integration/test
            go test -v -run TestMccpUI --timeout=99999s
      - store_artifacts:
          path: /tmp/workspace/test
      - store_test_results:
          path: /tmp/workspace/test

  cluster-components-gcp:
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          SKIP_COMPONENTS: false
          CLUSTER_VERSIONS: '1.20.2'
          NUM_MASTERS: 1
          NUM_WORKERS: 1
          IMAGE_NAME: centos-cloud/centos-7
      - image: selenium/standalone-chrome:latest
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-gce-config-yaml
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test
            # WKP UI reads values from the repository
            export CLEANUP_REPO=false

            # provision GCE VMs
            USE_IMAGE=0 NUM_HOSTS=2 ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh 1 false

            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            export WORKSPACES_ORG_ADMIN_TOKEN=$WKP_GITHUB_TOKEN

            # Create a cluster and test workspaces
            # FIXME: this is quite brittle and prone to breaking
            # We use the first workspaces test to create a cluster and load in a provider token so we can
            # start creating workspaces via the UI here.
            go test -v -run "TestWorkspaces/Test that workspaces components are running" --timeout=99999s

            # Wait for that test to propagate and settle
            sleep 120

            export SELENIUM_DEBUG=true
            ../../../cmd/wk/wk ui --entitlements=../../ci-wks-unlimited.entitlements --launch-browser=false  &
            cd ../../acceptance/test/
            go test -v

            if [ $CLEANUP_REPO != "false" ]; then
              hub delete -y "${WKP_GITHUB_USER}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
            fi

            cd ../../integration/test
            ../bin/internal/run-integration-tests.sh destroy
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy

            # delete the github repository if it's hanging
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            hub delete -y "${WKP_GITHUB_USER}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
          when: on_fail
          # Store artefacts
      - store_artifacts:
          path: /tmp/workspace
      - store_test_results:
          path: /tmp/workspace

  conformance-tests-sonobuoy-p1:
    <<: *creation-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          USE_LB: false
          NUM_MASTERS: 3
          NUM_WORKERS: 2
          SKIP_COMPONENTS: true
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-gce-config-yaml
      - run:
          name: Install sonobuoy
          command: |
            wget https://github.com/vmware-tanzu/sonobuoy/releases/download/v0.50.0/sonobuoy_0.50.0_linux_amd64.tar.gz
            tar -xvzf sonobuoy_0.50.0_linux_amd64.tar.gz
            chmod +x sonobuoy
            mv ./sonobuoy /usr/local/bin/sonobuoy
      - run-sonobuoy-tests:
          version: '1.18.16'
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy

            # delete the github repository if it's hanging
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            hub delete -y "${WKP_GITHUB_USER}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
          when: on_fail
      - run-sonobuoy-tests:
          version: '1.19.8'
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy

            # delete the github repository if it's hanging
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            hub delete -y "${WKP_GITHUB_USER}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
          when: on_fail
          # Store sonobuoy results as artifact
      - store_test_results:
          path: /home/circleci/src/github.com/weaveworks/wks/test/integration/test/sonobuoy-test-results-part-1
      - store_artifacts:
          path: /home/circleci/src/github.com/weaveworks/wks/test/integration/test/sonobuoy-test-results-1.18.16.tar.gz
      - store_artifacts:
          path: /home/circleci/src/github.com/weaveworks/wks/test/integration/test/sonobuoy-test-results-1.19.8.tar.gz

  conformance-tests-sonobuoy-p2:
    <<: *creation-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          IMAGE_NAME: centos-cloud/centos-7
          USE_LB: false
          NUM_MASTERS: 3
          NUM_WORKERS: 2
          SKIP_COMPONENTS: true
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-gce-config-yaml
      - run:
          name: Install sonobuoy
          command: |
            wget https://github.com/vmware-tanzu/sonobuoy/releases/download/v0.50.0/sonobuoy_0.50.0_linux_amd64.tar.gz
            tar -xvzf sonobuoy_0.50.0_linux_amd64.tar.gz
            chmod +x sonobuoy
            mv ./sonobuoy /usr/local/bin/sonobuoy
      - run-sonobuoy-tests:
          version: '1.20.2'
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy

            # delete the github repository if it's hanging
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            hub delete -y "${WKP_GITHUB_USER}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
          when: on_fail
          # Store sonobuoy results as artifact
      - store_test_results:
          path: /home/circleci/src/github.com/weaveworks/wks/test/integration/test/sonobuoy-test-results-part-2
      - store_artifacts:
          path: /home/circleci/src/github.com/weaveworks/wks/test/integration/test/sonobuoy-test-results-1.20.2.tar.gz

  preflight-ssh-gcp-centos: &preflight-ssh-gcp-centos
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          # Don't USE the default image, use IMAGE_NAME instead
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 1
          NUM_WORKERS: 1
          USE_LB: false
          CLUSTER_VERSIONS: '1.20.2'
          SKIP_COMPONENTS: true
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-gce-config-yaml
      - run:
          name: Change minDiskSpace value
          command: |
            cd test/integration/test
            sed -i "s/minDiskSpace:.*/minDiskSpace: 260000/" config.yaml
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test

            lb_count=$([ "$USE_LB" == "true" ] && echo "1" || echo "0")
            export NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS + $lb_count))
            export USE_IMAGE=0
            # provision $NUM_HOSTS GCE VMs
            ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS $USE_LB

            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            go test -v -run TestMachinesChecks --timeout=99999s

            ../bin/internal/run-integration-tests.sh destroy
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy
          when: on_fail

  cluster-lifecycle-tests:
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          # Don't USE the default image, use IMAGE_NAME instead
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 3
          NUM_WORKERS: 5 # 1 + 4 spare machines
          USE_LB: true
          CLUSTER_VERSIONS: '1.19.3'
          SKIP_COMPONENTS: true
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-gce-config-yaml
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test

            lb_count=$([ "$USE_LB" == "true" ] && echo "1" || echo "0")
            export NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS + $lb_count))
            export USE_IMAGE=0
            # provision $NUM_HOSTS GCE VMs
            ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS $USE_LB

            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            go test -v -run TestBasicLifeCycle --timeout=99999s

            ../bin/internal/run-integration-tests.sh destroy
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy
          when: on_fail

  cluster-lifecycle-footloose-tests:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      <<: *integrationTestCommonEnv
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-footloose-config-yaml
      - run:
          name: Setup the number of nodes
          command: |
            cd test/integration/test
            sed -i "s/controlPlaneNodes:.*/controlPlaneNodes: 3/" config.yaml
            sed -i "s/workerNodes:.*/workerNodes: 1/" config.yaml
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH
            cd test/integration/test
            export SKIP_COMPONENTS=true
            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            go test -v -run TestLifeCycleRemoveMasterNodes --timeout=1800s

  workspaces-tests:
    docker:
      - image: quay.io/wks/build:master-134af34f
        environment:
          <<: *integrationTestCommonEnv
          # Don't USE the default image, use IMAGE_NAME instead
          IMAGE_NAME: centos-cloud/centos-7
          NUM_MASTERS: 1
          NUM_WORKERS: 1 # 1 + 3 spare machines
          USE_LB: false
          CLUSTER_VERSIONS: '1.20.2'
          SKIP_COMPONENTS: false
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run:
          <<: *setup-base-gce-config-yaml
      - run:
          name: Run e2e tests
          no_output_timeout: 20m
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test

            lb_count=$([ "$USE_LB" == "true" ] && echo "1" || echo "0")
            export NUM_HOSTS=$(($NUM_MASTERS + $NUM_WORKERS + $lb_count))
            export USE_IMAGE=0
            # provision $NUM_HOSTS GCE VMs
            ../bin/internal/run-integration-tests.sh up
            ../bin/internal/update-config-with-node-info.sh $NUM_MASTERS $USE_LB

            export WORKSPACES_ORG=$WKP_GITHUB_ORG
            # this token has admin:org
            export WORKSPACES_ORG_ADMIN_TOKEN=$WKP_WORKSPACES_GITHUB_TOKEN
            # e.g. wkp-ci-test-bot from 1passwords
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            go test -v -run TestWorkspaces --timeout=99999s

            # Cleanup
            ../bin/internal/run-integration-tests.sh destroy
            hub delete -y "${WKP_GITHUB_ORG}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}" || echo "No worries"
            export GITLAB_PROJECT_URL="${WORKSPACES_GITLAB_ORG}%2F${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
            curl --request DELETE --header "Authorization: Bearer ${WORKSPACES_GITLAB_ORG_ADMIN_TOKEN}" --header "Content-Type: application/json" "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_URL}"
      - run:
          # Ensures that the GCP resources are deleted even if the previous step fails
          name: Destroy GCP resources
          command: |
            cd test/integration/test
            ../bin/internal/run-integration-tests.sh destroy

            # delete the github repository if it's hanging
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            hub delete -y "${WKP_GITHUB_USER}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
            hub delete -y "${WKP_GITHUB_ORG}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
            export GITLAB_PROJECT_URL="${WORKSPACES_GITLAB_ORG}%2F${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
            curl --request DELETE --header "Authorization: Bearer ${WORKSPACES_GITLAB_ORG_ADMIN_TOKEN}" --header "Content-Type: application/json" "https://gitlab.com/api/v4/projects/${GITLAB_PROJECT_URL}"
          when: on_fail

  existing-cluster-tests:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      <<: *integrationTestCommonEnv
      SKIP_COMPONENTS: true
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run: &setup-wkp-components-config-yaml
          name: Setup base config.yaml
          command: |
            cd test/integration/test
            # create file with docker password
            export CLUSTER_NAME="$CIRCLE_JOB-$CIRCLE_BUILD_NUM"
            echo "$DOCKER_IO_PASSWORD" > /tmp/workspace/docker-io-password
            sed -i "s/gitProviderOrg:.*/gitProviderOrg: $WKP_GITHUB_ORG/" config.yaml
            sed -i "s/dockerIOUser:.*/dockerIOUser: $DOCKER_IO_USER/" config.yaml
            sed -i "s|dockerIOPasswordFile:.*|dockerIOPasswordFile: /tmp/workspace/docker-io-password|" config.yaml
            sed -i "s/clusterName:.*/clusterName: $CLUSTER_NAME/" config.yaml
            sed -i "s/track:.*/track: wks-components/" config.yaml
      - install-kind
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test
            kind create cluster --config kind-config.yaml

            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            kubectl get nodes
            kubectl get pods --all-namespaces

            go test -v -run TestExistingClusterPreflightChecks --timeout=99999s

            hub delete -y "${WKP_GITHUB_ORG}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}" || echo "No worries"
      - run:
          # Ensures that the git repo is deleted even if the previous step fails
          name: Delete git repo
          command: |
            # delete the github repository if it's hanging
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            hub delete -y "${WKP_GITHUB_USER}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
            hub delete -y "${WKP_GITHUB_ORG}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}"
          when: on_fail

  cluster-components-on-kind-1-18:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      <<: *integrationTestCommonEnv
      SKIP_COMPONENTS: false
      KIND_NODE_IMAGE_TAG: 'v1.18.2'
      CLUSTER_VERSION: '1.18.2'
      SKIP_PROMPT: 1
    working_directory: /home/circleci/src/github.com/weaveworks/wks
    steps:
      - setup-integration-test-env
      - run: &setup-wkp-components-config-yaml
          name: Setup base config.yaml
          command: |
            cd test/integration/test
            # create file with docker password
            export CLUSTER_NAME="$CIRCLE_JOB-$CIRCLE_BUILD_NUM"
            echo "$DOCKER_IO_PASSWORD" > /tmp/workspace/docker-io-password

            sed -i "s/gitProviderOrg:.*/gitProviderOrg: $WKP_GITHUB_ORG/" config.yaml
            sed -i "s/dockerIOUser:.*/dockerIOUser: $DOCKER_IO_USER/" config.yaml
            sed -i "s|dockerIOPasswordFile:.*|dockerIOPasswordFile: /tmp/workspace/docker-io-password|" config.yaml
            sed -i "s/clusterName:.*/clusterName: $CLUSTER_NAME/" config.yaml
            sed -i "s/track:.*/track: wks-components/" config.yaml
            sed -i "s|podCIDRBlocks:.*|podCIDRBlocks: [$POD_CIDR_BLOCK]|" config.yaml
            sed -i "s|serviceCIDRBlocks:.*|serviceCIDRBlocks: [$SERVICE_CIDR_BLOCK]|" config.yaml

      - install-kind
      - run:
          name: Run e2e tests
          command: |
            export PATH=$GOROOT/bin:$PATH

            cd test/integration/test
            sed -i "s|kindest/node:.*|kindest/node:$KIND_NODE_IMAGE_TAG|" kind-config.yaml
            kind create cluster --config kind-config.yaml

            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            kubectl get nodes
            kubectl get pods --all-namespaces

            go test -v -run TestClusterCreation --timeout=99999s

            hub delete -y "${WKP_GITHUB_ORG}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}" || echo "No worries"
      - run:
          # Ensures that the git repo is deleted even if the previous step fails
          name: Delete git repo
          command: |
            # delete the github repository if it's hanging
            export GITHUB_TOKEN=$WKP_GITHUB_TOKEN
            echo "Cleaning up cluster repo on Github if it is hanging."
            hub delete -y "${WKP_GITHUB_ORG}/${CIRCLE_JOB}-${CIRCLE_BUILD_NUM}" || echo "Could not delete or the repo wasn't found."
          when: on_fail

  third-party-dependencies-check:
    <<: *defaults
    working_directory: /src/github.com/weaveworks/wks
    steps:
      - checkout
      - add-go-mod-ssh-keys
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Use cached node_modules
          command: |
            mv /tmp/workspace/ui/node_modules ui/node_modules
            mv /tmp/workspace/wkp-cluster-components/node_modules wkp-cluster-components/node_modules
      - run:
          name: Check third party dependencies
          command: |
            set -e
            GITHUB_TOKEN=$WKP_GITHUB_TOKEN bin/sca-generate-deps.sh

            # Check if dependency info changed
            if ! git --no-pager diff --exit-code user-guide/content/deps/_index.md; then
              echo "found a change in the deps doc pls go and update it!"
              exit 1
            else
              exit 0
            fi
      - run:
          name: Upload updated deps file
          command: |
            mkdir -p /tmp/artifacts
            cp user-guide/content/deps/_index.md /tmp/artifacts
          when: on_fail
      - store_artifacts:
          path: /tmp/artifacts

  vulnerability-detection:
    machine:
      image: ubuntu-2004:202010-01
    environment:
      <<: *integrationTestCommonEnv
      FS_SCAN_SNYK: true
      FS_SCAN_TRIVY: true
      IMAGE_SCAN_SNYK: true
      IMAGE_SCAN_TRIVY: true
    steps:
      - checkout
      - add-go-mod-ssh-keys
      - run:
          name: Login at dockerhub
          command: |
            docker login -u ${DOCKER_IO_USER} -p ${DOCKER_IO_PASSWORD}
      - run:
          name: Install snyk and authenticate
          command: |
            export PATH=$GOROOT/bin:$PATH

            npm install -g snyk
            snyk auth ${WKP_SNYK_API_TOKEN}
      - run:
          name: Install trivy
          command: |
            # Install trivy
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
      - run:
          name: Scan wks repo [snyk]
          command: |
            if ${FS_SCAN_SNYK}; then
              snyk test --all-projects --severity-threshold=medium --json-file-output=/tmp/snyk-filesystem-results.json -d || true
            fi
      - run:
          name: Scan wks repo [trivy]
          command: |
            if ${FS_SCAN_TRIVY}; then
              touch /tmp/trivy-filesystem-results.txt
              sudo trivy fs --exit-code=0  . > /tmp/trivy-filesystem-results.txt
            fi
      - run:
          name: Scan docker images [snyk]
          command: |
            if ${IMAGE_SCAN_SNYK}; then
              touch /tmp/snyk-all-container-results.json
              # Create the goroot dir if not exists so that make install runs
              mkdir -p $GOROOT
              
              # Run it once to download the go dependencies
              # so that the second time it is run the output is only the images
              make images
              
              IMAGE_TAG=$(./tools/image-tag)
              for IMAGE in $(make images);
              do
                snyk container test ${IMAGE}:${IMAGE_TAG} --json-file-output=/tmp/snyk-container-results-${IMAGE}-${IMAGE_TAG}.json || true
              done
            fi
      - run:
          name: Scan docker images [trivy]
          command: |
            if ${IMAGE_SCAN_TRIVY}; then
              mkdir -p $GOROOT

              # Run it once to download the go dependencies
              # so that the second time it is run the output is only the images
              make images

              touch /tmp/trivy-all-container-results.txt
              touch /tmp/trivy-container-results.txt
              
              IMAGE_TAG=$(./tools/image-tag)
              for IMAGE in $(make images);
              do
                sudo trivy image --exit-code=0 --output /tmp/trivy-container-results-${IMAGE}-${IMAGE_TAG}.txt ${IMAGE}:${IMAGE_TAG} || true
                cat /tmp/trivy-container-results-${IMAGE}-${IMAGE_TAG}.txt >> /tmp/trivy-all-container-results.txt || true
              done
            fi
      - store_artifacts:
          path: /tmp/snyk-filesystem-results.json
      - store_artifacts:
          path: /tmp/trivy-filesystem-results.txt
      - store_artifacts:
          path: /tmp/trivy-all-container-results.txt
